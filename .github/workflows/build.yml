name: build

on: [push, pull_request]

concurrency:
  group: ${{format('{0}:{1}:{2}', github.repository, github.workflow, github.ref)}}
  cancel-in-progress: true

env:
  UBSAN_OPTIONS: print_stacktrace=1

jobs:
  runner-selection:
    runs-on: ${{ github.repository_owner == 'boostorg' && fromJSON('[ "self-hosted", "linux", "x64", "ubuntu-latest-aws" ]') || 'ubuntu-latest' }}
    outputs:
      labelmatrix: ${{ steps.aws_hosted_runners.outputs.labelmatrix }}
    steps:
      - name: AWS Hosted Runners
        id: aws_hosted_runners
        uses: cppalliance/aws-hosted-runners@v1.0.0

  posix:
    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        include:
          - toolset: gcc-5
            cxxstd: 11,14,1z
            os: ubuntu-24.04
            container: ubuntu:16.04
            install: g++-5
          - toolset: gcc-6
            cxxstd: 11,14,1z
            os: ubuntu-24.04
            container: ubuntu:18.04
            install: g++-6
          - toolset: gcc-7
            cxxstd: 11,14,17
            os: ubuntu-24.04
            container: ubuntu:18.04
            install: g++-7
          - toolset: gcc-8
            cxxstd: 11,14,17,2a
            os: ubuntu-24.04
            container: ubuntu:18.04
            install: g++-8
          - toolset: gcc-9
            cxxstd: 11,14,17,2a
            os: ubuntu-24.04
            container: ubuntu:20.04
            install: g++-9
          - toolset: gcc-10
            cxxstd: 11,14,17,2a
            os: ubuntu-22.04
            install: g++-10
          - toolset: gcc-11
            cxxstd: 11,14,17,20
            os: ubuntu-22.04
            install: g++-11
          - toolset: gcc-12
            cxxstd: 11,14,17,20,2b
            os: ubuntu-22.04
            install: g++-12
          - toolset: gcc-13
            cxxstd: 11,14,17,20,2b
            os: ubuntu-24.04
            install: g++-13
          - toolset: gcc-14
            cxxstd: 11,14,17,20,2b
            os: ubuntu-24.04
            install: g++-14
          - toolset: clang
            compiler: clang++-3.5
            cxxstd: 11
            os: ubuntu-24.04
            container: ubuntu:16.04
            install: clang-3.5
          - toolset: clang
            compiler: clang++-3.6
            cxxstd: 11,14
            os: ubuntu-24.04
            container: ubuntu:16.04
            install: clang-3.6
          - toolset: clang
            compiler: clang++-3.7
            cxxstd: 11,14
            os: ubuntu-24.04
            container: ubuntu:16.04
            install: clang-3.7
          - toolset: clang
            compiler: clang++-3.8
            cxxstd: 11,14
            os: ubuntu-24.04
            container: ubuntu:16.04
            install: clang-3.8
          - toolset: clang
            compiler: clang++-3.9
            cxxstd: 11,14
            os: ubuntu-24.04
            container: ubuntu:18.04
            install: clang-3.9
          - toolset: clang
            compiler: clang++-4.0
            cxxstd: 11,14
            os: ubuntu-24.04
            container: ubuntu:18.04
            install: clang-4.0
          - toolset: clang
            compiler: clang++-5.0
            cxxstd: 11,14
            os: ubuntu-24.04
            container: ubuntu:18.04
            install: clang-5.0
          - toolset: clang
            install: clang-6.0
            compiler: clang++-6.0
            cxxstd: 11,14,17
            os: ubuntu-24.04
            container: ubuntu:18.04
          - toolset: clang
            install: clang-7
            compiler: clang++-7
            cxxstd: 11,14
            os: ubuntu-24.04
            container: ubuntu:18.04
          - toolset: clang
            install: clang-8
            compiler: clang++-8
            cxxstd: 11,14,17
            os: ubuntu-24.04
            container: ubuntu:18.04
          - toolset: clang
            install: clang-9
            compiler: clang++-9
            cxxstd: 11,14,17,2a
            os: ubuntu-24.04
            container: ubuntu:18.04
          - toolset: clang
            install: clang-10
            compiler: clang++-10
            cxxstd: 11,14,17,2a
            os: ubuntu-24.04
            container: ubuntu:20.04
          - toolset: clang
            install: clang-11
            compiler: clang++-11
            cxxstd: 11,14,17,2a
            os: ubuntu-24.04
            container: ubuntu:20.04
          - toolset: clang
            install: clang-12
            compiler: clang++-12
            cxxstd: 11,14,17,20
            os: ubuntu-22.04
          - toolset: clang
            install: clang-13
            compiler: clang++-13
            cxxstd: 11,14,17,20
            os: ubuntu-22.04
          - toolset: clang
            install: clang-14
            compiler: clang++-14
            cxxstd: 11,14,17,20
            os: ubuntu-22.04
          - toolset: clang
            install: clang-15
            compiler: clang++-15
            cxxstd: 11,14,17,20,2b
            os: ubuntu-22.04
          - toolset: clang
            install: clang-16
            compiler: clang++-16
            cxxstd: 11,14,17,20 # no 2b: https://github.com/llvm/llvm-project/issues/97842
            os: ubuntu-24.04
          - toolset: clang
            install: clang-17
            compiler: clang++-17
            cxxstd: 11,14,17,20 # no 2b: https://github.com/llvm/llvm-project/issues/97842
            os: ubuntu-24.04
          - toolset: clang
            install: clang-18
            compiler: clang++-18
            cxxstd: 11,14,17,20,2b
            os: ubuntu-24.04
          - toolset: clang
            install: clang-19
            compiler: clang++-19
            cxxstd: 11,14,17,20,2b
            os: ubuntu-24.04
          - toolset: clang
            os: macos-13
            cxxstd: 11,14,17,20,2b
          - toolset: clang
            os: macos-14
            cxxstd: 11,14,17,20,2b
          - toolset: clang
            os: macos-15
            cxxstd: 11,14,17,20,2b

    needs: [runner-selection]
    runs-on: ${{ fromJSON(needs.runner-selection.outputs.labelmatrix)[matrix.os] }}
    container:
      image: ${{ matrix.container }}
      volumes:
        - /node20217:/node20217:rw,rshared
        - ${{ startsWith(matrix.container, 'ubuntu:1') && '/node20217:/__e/node20:ro,rshared' || ' ' }}
  
    steps:
      - name: Setup container environment
        if: matrix.container
        run: |
          apt-get update
          apt-get -y install sudo python3 git g++ curl xz-utils

      - name: Install nodejs20glibc2.17
        if: ${{ startsWith( matrix.container, 'ubuntu:1' ) }}
        run: |
          curl -LO https://archives.boost.io/misc/node/node-v20.9.0-linux-x64-glibc-217.tar.xz
          tar -xf node-v20.9.0-linux-x64-glibc-217.tar.xz --strip-components 1 -C /node20217

      - uses: actions/checkout@v4

      - name: Install packages
        if: matrix.install
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{matrix.install}} libssl-dev

      - name: Setup Boost
        shell: bash
        run: |
          echo GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          LIBRARY=${GITHUB_REPOSITORY#*/}
          echo LIBRARY: $LIBRARY
          echo "LIBRARY=$LIBRARY" >> $GITHUB_ENV
          echo GITHUB_BASE_REF: $GITHUB_BASE_REF
          echo GITHUB_REF: $GITHUB_REF
          REF=${GITHUB_BASE_REF:-$GITHUB_REF}
          REF=${REFrefs/heads/}
          echo REF: $REF
          BOOST_BRANCH=develop && [ "$REF" == "master" ] && BOOST_BRANCH=master || true
          echo BOOST_BRANCH: $BOOST_BRANCH
          cd ..
          git clone -b $BOOST_BRANCH --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          cp -r $GITHUB_WORKSPACE/* libs/$LIBRARY
          git submodule update --init tools/boostdep
          python3 tools/boostdep/depinst/depinst.py $LIBRARY
          ./bootstrap.sh
          ./b2 -d0 headers

      - name: Create user-config.jam
        if: matrix.compiler
        run: |
          echo "using ${{matrix.toolset}} : : ${{matrix.compiler}} ;" > ~/user-config.jam

      - name: Run tests
        run: |
          cd ../boost-root
          ./b2 libs/$LIBRARY/test toolset=${{matrix.toolset}} cxxstd=${{matrix.cxxstd}} variant=debug,release

  windows:
    strategy:
      fail-fast: false
      matrix:
        include:
          - toolset: msvc-14.2
            cxxstd: 14,17
            addrmd: 32
            os: windows-2019
          - toolset: msvc-14.2
            cxxstd: 20,latest
            addrmd: 32
            os: windows-2019
          - toolset: msvc-14.2
            cxxstd: 14,17
            addrmd: 64
            os: windows-2019
          - toolset: msvc-14.2
            cxxstd: 20,latest
            addrmd: 64
            os: windows-2019
          - toolset: msvc-14.3
            cxxstd: 14,17
            addrmd: 32
            os: windows-2022
          - toolset: msvc-14.3
            cxxstd: 20,latest
            addrmd: 32
            os: windows-2022
          - toolset: msvc-14.3
            cxxstd: 14,17
            addrmd: 64
            os: windows-2022
          - toolset: msvc-14.3
            cxxstd: 20,latest
            addrmd: 64
            os: windows-2022
          - toolset: clang-win
            cxxstd: 14,17,latest
            addrmd: 32
            os: windows-2022
            cxxflags: "linkflags=/safeseh:no"
          - toolset: clang-win
            cxxstd: 14,17,latest
            addrmd: 64
            os: windows-2022

    needs: [runner-selection]
    runs-on: ${{ fromJSON(needs.runner-selection.outputs.labelmatrix)[matrix.os] }}

    steps:
      - uses: actions/checkout@v4
      - name: Setup OpenSSL
        shell: cmd
        run: |
          if "${{matrix.addrmd}}" == "64" (
            choco install --no-progress -y openssl --version 3.1.1
          )
          if "${{matrix.addrmd}}" == "32" (
            set openssl_install_dir="C:\\Program Files (x86)\\OpenSSL-Win32"
            choco install --no-progress -y openssl --forcex86 --version 1.1.1.2100
          )
          if "${{matrix.addrmd}}" == "64" (
            if exist "C:\Program Files\OpenSSL\" (
              set openssl_install_dir="C:\\Program Files\\OpenSSL"
            ) else (
              set openssl_install_dir="C:\\Program Files\\OpenSSL-Win64"
            )
          )
          mklink /D C:\OpenSSL %openssl_install_dir%
          refreshenv
          set

      - name: Setup Boost
        shell: cmd
        run: |
          echo GITHUB_REPOSITORY: %GITHUB_REPOSITORY%
          for /f %%i in ("%GITHUB_REPOSITORY%") do set LIBRARY=%%~nxi
          echo LIBRARY: %LIBRARY%
          echo LIBRARY=%LIBRARY%>>%GITHUB_ENV%
          echo GITHUB_BASE_REF: %GITHUB_BASE_REF%
          echo GITHUB_REF: %GITHUB_REF%
          if "%GITHUB_BASE_REF%" == "" set GITHUB_BASE_REF=%GITHUB_REF%
          set BOOST_BRANCH=develop
          for /f %%i in ("%GITHUB_BASE_REF%") do if "%%~nxi" == "master" set BOOST_BRANCH=master
          echo BOOST_BRANCH: %BOOST_BRANCH%
          cd ..
          git clone -b %BOOST_BRANCH% --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          xcopy /s /e /q %GITHUB_WORKSPACE% libs\%LIBRARY%\
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py --git_args "--jobs 3" %LIBRARY%
          echo using openssl : : ^<include^>"C:/OpenSSL/include" ^<search^>"C:/OpenSSL/lib" ^<ssl-name^>libssl ^<crypto-name^>libcrypto : ^<address-model^>${{matrix.addrmd}} ; >> %USERPROFILE%\user-config.jam
          cmd /c bootstrap
          b2 -d0 headers

      - name: Run tests
        shell: cmd
        run: |
          cd ../boost-root
          b2 -j3 libs/%LIBRARY%/test ${{matrix.cxxflags}} toolset=${{matrix.toolset}} cxxstd=${{matrix.cxxstd}} address-model=${{matrix.addrmd}} variant=debug,release

  posix-cmake-subdir:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
          - os: ubuntu-24.04
          - os: macos-13
          - os: macos-14
          - os: macos-15

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v4

      - name: Install packages
        if: matrix.install
        run: sudo apt-get -y install ${{matrix.install}}

      - name: Setup Boost
        run: |
          echo GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          LIBRARY=${GITHUB_REPOSITORY#*/}
          echo LIBRARY: $LIBRARY
          echo "LIBRARY=$LIBRARY" >> $GITHUB_ENV
          echo GITHUB_BASE_REF: $GITHUB_BASE_REF
          echo GITHUB_REF: $GITHUB_REF
          REF=${GITHUB_BASE_REF:-$GITHUB_REF}
          REF=${REF#refs/heads/}
          echo REF: $REF
          BOOST_BRANCH=develop && [ "$REF" == "master" ] && BOOST_BRANCH=master || true
          echo BOOST_BRANCH: $BOOST_BRANCH
          cd ..
          git clone -b $BOOST_BRANCH --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          cp -r $GITHUB_WORKSPACE/* libs/$LIBRARY
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py --git_args "--jobs 3" $LIBRARY

      - name: Use library with add_subdirectory
        run: |
          cd ../boost-root/libs/$LIBRARY/test/cmake_test
          mkdir __build__ && cd __build__
          cmake ..
          cmake --build .
          ctest --output-on-failure --no-tests=error

  posix-cmake-install:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
          - os: ubuntu-24.04
          - os: macos-13
          - os: macos-14
          - os: macos-15

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v4

      - name: Install packages
        if: matrix.install
        run: sudo apt-get -y install ${{matrix.install}}

      - name: Setup Boost
        run: |
          echo GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          LIBRARY=${GITHUB_REPOSITORY#*/}
          echo LIBRARY: $LIBRARY
          echo "LIBRARY=$LIBRARY" >> $GITHUB_ENV
          echo GITHUB_BASE_REF: $GITHUB_BASE_REF
          echo GITHUB_REF: $GITHUB_REF
          REF=${GITHUB_BASE_REF:-$GITHUB_REF}
          REF=${REF#refs/heads/}
          echo REF: $REF
          BOOST_BRANCH=develop && [ "$REF" == "master" ] && BOOST_BRANCH=master || true
          echo BOOST_BRANCH: $BOOST_BRANCH
          cd ..
          git clone -b $BOOST_BRANCH --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          cp -r $GITHUB_WORKSPACE/* libs/$LIBRARY
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py --git_args "--jobs 3" $LIBRARY

      - name: Configure
        run: |
          cd ../boost-root
          mkdir __build__ && cd __build__
          cmake -DBOOST_INCLUDE_LIBRARIES=$LIBRARY -DCMAKE_INSTALL_PREFIX=~/.local ..

      - name: Install
        run: |
          cd ../boost-root/__build__
          cmake --build . --target install

      - name: Use the installed library
        run: |
          cd ../boost-root/libs/$LIBRARY/test/cmake_test && mkdir __build__ && cd __build__
          cmake -DCMAKE_INSTALL_PREFIX=~/.local -DBOOST_CI_INSTALL_TEST=ON ..
          cmake --build .
          ctest --output-on-failure --no-tests=error

  posix-cmake-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
          - os: ubuntu-24.04
          - os: macos-13
          - os: macos-14
          - os: macos-15

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v4

      - name: Install packages
        if: matrix.install
        run: sudo apt-get -y install ${{matrix.install}}

      - name: Setup Boost
        run: |
          echo GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          LIBRARY=${GITHUB_REPOSITORY#*/}
          echo LIBRARY: $LIBRARY
          echo "LIBRARY=$LIBRARY" >> $GITHUB_ENV
          echo GITHUB_BASE_REF: $GITHUB_BASE_REF
          echo GITHUB_REF: $GITHUB_REF
          REF=${GITHUB_BASE_REF:-$GITHUB_REF}
          REF=${REF#refs/heads/}
          echo REF: $REF
          BOOST_BRANCH=develop && [ "$REF" == "master" ] && BOOST_BRANCH=master || true
          echo BOOST_BRANCH: $BOOST_BRANCH
          cd ..
          git clone -b $BOOST_BRANCH --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          cp -r $GITHUB_WORKSPACE/* libs/$LIBRARY
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py --git_args "--jobs 3" $LIBRARY

      - name: Configure
        run: |
          cd ../boost-root
          mkdir __build__ && cd __build__
          cmake -DBOOST_INCLUDE_LIBRARIES=$LIBRARY -DBUILD_TESTING=ON ..

      - name: Build tests
        run: |
          cd ../boost-root/__build__
          cmake --build . --target tests -j $(nproc || getconf _NPROCESSORS_ONLN)

      - name: Run tests
        run: |
          cd ../boost-root/__build__
          ctest --output-on-failure --no-tests=error

  windows-cmake-subdir:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
          - os: windows-2022

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Boost
        shell: cmd
        run: |
          echo GITHUB_REPOSITORY: %GITHUB_REPOSITORY%
          for /f %%i in ("%GITHUB_REPOSITORY%") do set LIBRARY=%%~nxi
          echo LIBRARY: %LIBRARY%
          echo LIBRARY=%LIBRARY%>>%GITHUB_ENV%
          echo GITHUB_BASE_REF: %GITHUB_BASE_REF%
          echo GITHUB_REF: %GITHUB_REF%
          if "%GITHUB_BASE_REF%" == "" set GITHUB_BASE_REF=%GITHUB_REF%
          set BOOST_BRANCH=develop
          for /f %%i in ("%GITHUB_BASE_REF%") do if "%%~nxi" == "master" set BOOST_BRANCH=master
          echo BOOST_BRANCH: %BOOST_BRANCH%
          cd ..
          git clone -b %BOOST_BRANCH% --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          xcopy /s /e /q %GITHUB_WORKSPACE% libs\%LIBRARY%\
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py --git_args "--jobs 3" %LIBRARY%

      - name: Use library with add_subdirectory (Debug)
        shell: cmd
        run: |
          cd ../boost-root/libs/%LIBRARY%/test/cmake_test
          mkdir __build__ && cd __build__
          cmake -DCMAKE_TOOLCHAIN_FILE="../../../cmake/toolchains/msvc.cmake" ..
          cmake --build . --config Debug
          ctest --output-on-failure --no-tests=error -C Debug

      - name: Use library with add_subdirectory (Release)
        shell: cmd
        run: |
          cd ../boost-root/libs/%LIBRARY%/test/cmake_test/__build__
          cmake --build . --config Release
          ctest --output-on-failure --no-tests=error -C Release

  windows-cmake-install:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
          - os: windows-2022

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Boost
        shell: cmd
        run: |
          echo GITHUB_REPOSITORY: %GITHUB_REPOSITORY%
          for /f %%i in ("%GITHUB_REPOSITORY%") do set LIBRARY=%%~nxi
          echo LIBRARY: %LIBRARY%
          echo LIBRARY=%LIBRARY%>>%GITHUB_ENV%
          echo GITHUB_BASE_REF: %GITHUB_BASE_REF%
          echo GITHUB_REF: %GITHUB_REF%
          if "%GITHUB_BASE_REF%" == "" set GITHUB_BASE_REF=%GITHUB_REF%
          set BOOST_BRANCH=develop
          for /f %%i in ("%GITHUB_BASE_REF%") do if "%%~nxi" == "master" set BOOST_BRANCH=master
          echo BOOST_BRANCH: %BOOST_BRANCH%
          cd ..
          git clone -b %BOOST_BRANCH% --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          xcopy /s /e /q %GITHUB_WORKSPACE% libs\%LIBRARY%\
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py --git_args "--jobs 3" %LIBRARY%

      - name: Configure
        shell: cmd
        run: |
          cd ../boost-root
          mkdir __build__ && cd __build__
          cmake -DBOOST_INCLUDE_LIBRARIES=%LIBRARY% -DCMAKE_INSTALL_PREFIX=C:/cmake-prefix -DCMAKE_TOOLCHAIN_FILE="../libs/%LIBRARY%/cmake/toolchains/msvc.cmake" ..

      - name: Install (Debug)
        shell: cmd
        run: |
          cd ../boost-root/__build__
          cmake --build . --target install --config Debug

      - name: Install (Release)
        shell: cmd
        run: |
          cd ../boost-root/__build__
          cmake --build . --target install --config Release

      - name: Use the installed library (Debug)
        shell: cmd
        run: |
          cd ../boost-root/libs/%LIBRARY%/test/cmake_test && mkdir __build__ && cd __build__
          cmake -DCMAKE_INSTALL_PREFIX=C:/cmake-prefix -DBOOST_CI_INSTALL_TEST=ON -DCMAKE_TOOLCHAIN_FILE="../../../cmake/toolchains/msvc.cmake" ..
          cmake --build . --config Debug
          ctest --output-on-failure --no-tests=error -C Debug

      - name: Use the installed library (Release)
        shell: cmd
        run: |
          cd ../boost-root/libs/%LIBRARY%/test/cmake_test/__build__
          cmake --build . --config Release
          ctest --output-on-failure --no-tests=error -C Release

  windows-cmake-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
          - os: windows-2022

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Boost
        shell: cmd
        run: |
          echo GITHUB_REPOSITORY: %GITHUB_REPOSITORY%
          for /f %%i in ("%GITHUB_REPOSITORY%") do set LIBRARY=%%~nxi
          echo LIBRARY: %LIBRARY%
          echo LIBRARY=%LIBRARY%>>%GITHUB_ENV%
          echo GITHUB_BASE_REF: %GITHUB_BASE_REF%
          echo GITHUB_REF: %GITHUB_REF%
          if "%GITHUB_BASE_REF%" == "" set GITHUB_BASE_REF=%GITHUB_REF%
          set BOOST_BRANCH=develop
          for /f %%i in ("%GITHUB_BASE_REF%") do if "%%~nxi" == "master" set BOOST_BRANCH=master
          echo BOOST_BRANCH: %BOOST_BRANCH%
          cd ..
          git clone -b %BOOST_BRANCH% --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          xcopy /s /e /q %GITHUB_WORKSPACE% libs\%LIBRARY%\
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py --git_args "--jobs 3" %LIBRARY%

      - name: Configure
        shell: cmd
        run: |
          cd ../boost-root
          mkdir __build__ && cd __build__
          cmake -DBOOST_INCLUDE_LIBRARIES=%LIBRARY% -DBUILD_TESTING=ON -DCMAKE_TOOLCHAIN_FILE="../libs/%LIBRARY%/cmake/toolchains/msvc.cmake" ..

      - name: Build tests (Debug)
        shell: cmd
        run: |
          cd ../boost-root/__build__
          cmake --build . --target tests --config Debug -j %NUMBER_OF_PROCESSORS%

      - name: Run tests (Debug)
        shell: cmd
        run: |
          cd ../boost-root/__build__
          ctest --output-on-failure --no-tests=error -C Debug

      - name: Build tests (Release)
        shell: cmd
        run: |
          cd ../boost-root/__build__
          cmake --build . --target tests --config Release -j %NUMBER_OF_PROCESSORS%

      - name: Run tests (Release)
        shell: cmd
        run: |
          cd ../boost-root/__build__
          ctest --output-on-failure --no-tests=error -C Release
